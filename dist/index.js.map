{"version":3,"sources":["../src/index.ts","../src/auth.server.ts"],"sourcesContent":["import AuthManager from \"./auth.server\";\n\nexport { AuthManager };\n","import { cookies } from \"next/headers\";\nimport jwt from \"jsonwebtoken\";\nimport { SupabaseClient } from \"@supabase/supabase-js\";\nimport { AuthResponse, AuthTokens, SupabaseJwtPayload } from \"./types\";\n\nclass AuthManager {\n  private supabase: SupabaseClient;\n  private jwtSecret: string;\n\n  /**\n   * Initializes the authentication manager with necessary dependencies.\n   * @param supabase An instance of @supabase/ssr client\n   * @param jwtSecret The secret used to verify JWTs.\n   */\n  constructor(supabase: SupabaseClient<any, any, any>, jwtSecret: string) {\n    this.supabase = supabase;\n    this.jwtSecret = jwtSecret;\n  }\n\n  /**\n   * Retrieves authentication tokens from cookies.\n   * @returns {AuthTokens | null} AuthTokens if found and correctly parsed, null otherwise.\n   */\n  private getAuthTokensFromCookies(): AuthTokens | null {\n    const cookieNameRegex = /^sb-[a-z]+-auth-token$/;\n    const authCookie = cookies()\n      .getAll()\n      .find((cookie) => cookieNameRegex.test(cookie.name));\n\n    if (!authCookie) {\n      return null;\n    }\n\n    try {\n      const session = JSON.parse(decodeURIComponent(authCookie.value));\n      return {\n        access_token: session.access_token,\n        refresh_token: session.refresh_token,\n      };\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Verifies the JWT token, refreshes it if expired, and returns user data.\n   * @returns {Promise<AuthResponse>} The user session data if successful, or an error message.\n   */\n  public async getSafeSession(): Promise<AuthResponse> {\n    const tokens = this.getAuthTokensFromCookies();\n    if (!tokens) {\n      return { status: \"error\", error: \"Authentication tokens not found\" };\n    }\n    return this.parseAndVerifySession(tokens);\n  }\n\n  /**\n   * Verifies the JWT access token and decodes it. Handles token expiration by refreshing it.\n   * @param tokens The authentication tokens obtained from cookies.\n   * @returns {Promise<AuthResponse>} The decoded JWT payload or an error.\n   */\n  private async parseAndVerifySession(\n    tokens: AuthTokens\n  ): Promise<AuthResponse> {\n    try {\n      const session = jwt.verify(\n        tokens.access_token,\n        this.jwtSecret\n      ) as SupabaseJwtPayload;\n      return { status: \"success\", data: { ...session, id: session.sub } };\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        return this.refreshSession(tokens);\n      } else {\n        return { status: \"error\", error: \"JWT verification failed\" };\n      }\n    }\n  }\n\n  /**\n   * Refreshes the session when the JWT has expired.\n   * @param tokens The authentication tokens.\n   * @returns {Promise<AuthResponse>} The new session data or an error.\n   */\n  private async refreshSession(tokens: AuthTokens): Promise<AuthResponse> {\n    const session = await this.supabase.auth.setSession(tokens);\n    if (session.error) {\n      return { status: \"error\", error: session.error.message };\n    }\n    if (!session.data || !session.data.user) {\n      return {\n        status: \"error\",\n        error: \"No user data available after refreshing session\",\n      };\n    }\n    return {\n      status: \"success\",\n      data: { ...session.data.user, sub: session.data.user.id },\n    };\n  }\n}\n\nexport default AuthManager;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAAwB;AACxB,0BAAgB;AAIhB,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAShB,YAAY,UAAyC,WAAmB;AACtE,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMQ,2BAA8C;AACpD,UAAM,kBAAkB;AACxB,UAAM,iBAAa,wBAAQ,EACxB,OAAO,EACP,KAAK,CAAC,WAAW,gBAAgB,KAAK,OAAO,IAAI,CAAC;AAErD,QAAI,CAAC,YAAY;AACf,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,UAAU,KAAK,MAAM,mBAAmB,WAAW,KAAK,CAAC;AAC/D,aAAO;AAAA,QACL,cAAc,QAAQ;AAAA,QACtB,eAAe,QAAQ;AAAA,MACzB;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMa,iBAAwC;AAAA;AACnD,YAAM,SAAS,KAAK,yBAAyB;AAC7C,UAAI,CAAC,QAAQ;AACX,eAAO,EAAE,QAAQ,SAAS,OAAO,kCAAkC;AAAA,MACrE;AACA,aAAO,KAAK,sBAAsB,MAAM;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOc,sBACZ,QACuB;AAAA;AACvB,UAAI;AACF,cAAM,UAAU,oBAAAA,QAAI;AAAA,UAClB,OAAO;AAAA,UACP,KAAK;AAAA,QACP;AACA,eAAO,EAAE,QAAQ,WAAW,MAAM,iCAAK,UAAL,EAAc,IAAI,QAAQ,IAAI,GAAE;AAAA,MACpE,SAAS,OAAO;AACd,YAAI,iBAAiB,oBAAAA,QAAI,mBAAmB;AAC1C,iBAAO,KAAK,eAAe,MAAM;AAAA,QACnC,OAAO;AACL,iBAAO,EAAE,QAAQ,SAAS,OAAO,0BAA0B;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOc,eAAe,QAA2C;AAAA;AACtE,YAAM,UAAU,MAAM,KAAK,SAAS,KAAK,WAAW,MAAM;AAC1D,UAAI,QAAQ,OAAO;AACjB,eAAO,EAAE,QAAQ,SAAS,OAAO,QAAQ,MAAM,QAAQ;AAAA,MACzD;AACA,UAAI,CAAC,QAAQ,QAAQ,CAAC,QAAQ,KAAK,MAAM;AACvC,eAAO;AAAA,UACL,QAAQ;AAAA,UACR,OAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,iCAAK,QAAQ,KAAK,OAAlB,EAAwB,KAAK,QAAQ,KAAK,KAAK,GAAG;AAAA,MAC1D;AAAA,IACF;AAAA;AACF;AAEA,IAAO,sBAAQ;","names":["jwt"]}